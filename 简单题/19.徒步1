def solution(n, k, p):
    # 在第一个补给站
    cost = 0
    current_price = p[0][1]

    # 寻找最便宜的补给站
    next_depot = find_cheapest_depot(k, p)
    cost += next_depot[0] * current_price

    # 直达终点
    cost += (n - next_depot[0]) * next_depot[1]

    return cost

def find_cheapest_depot(k, p):
    for i in range(1, k - 1):
        if p[i][1] < p[i+1][1]:
            cheapest_depot = p[i]
        else:
            cheapest_depot = p[i+1]

    return cheapest_depot

if __name__ == "__main__":
    # Add your test cases here

    print(solution(5, 4, [[0, 2], [1, 3], [2, 1], [3, 2]]) == 7)
