def solution(N, data_array):
    """
    不会，刚开始想的合并，好像并没有卵用，然后就开始想求原来数组的连续最大子数组和，发现想不出来。这题是力扣53题升级的，原题就是求连续最大子数组和，
    网上有很多做法（动态规划，暴力枚举，分治法等等）kadane也属于DP算法。搞定这个后面就是翻转所有的子数组，寻找最大子数组和，没有好活可以整了，有的不会= =。
    """
    # 第一步：使用 Kadane 算法计算最大子数组和
    def kadane(arr):
        max_end_here = max_so_far = arr[0]
        for x in arr[1:]:
            max_end_here = max(x, max_end_here + x)
            max_so_far = max(max_so_far, max_end_here)
        return max_so_far

    # 第二步：翻转所有的子数组，寻找最大子数组和
    max_sum = kadane(data_array)
    for i in range(N):
        for j in range(i, N):
            # 翻转子数组 nums[i:j+1]
            flipped = data_array[:i] + data_array[i:j+1][::-1] + data_array[j+1:]
            max_sum = max(max_sum, kadane(flipped))
    
    return max_sum

if __name__ == "__main__":
    #  You can add more test cases here
    array1 = [-85, -11, 92, 6, 49, -76, 28, -16, 3, -29, 26, 37, 86, 3, 25, -43, -36, -27, 45, 87, 91, 58, -15, 91, 5, 99, 40, 68, 54, -95, 66, 49, 74, 9, 24, -84, 12, -23, -92, -47, 5, 91, -79, 94, 61, -54, -71, -36, 31, 97, 64, -14, -16, 48, -79, -70, 54, -94, 48, 37, 47, -58, 6, 62, 19, 8, 32, 65, -81, -27, 14, -18, -34, -64, -97, -21, -76, 51, 0, -79, -22, -78, -95, -90, 4, 82, -79, -85, -64, -79, 63, 49, 21, 97, 47, 16, 61, -46, 54, 44]
    print(solution(5, [1,2,3,-1,4]) == 10 )
    print(solution(100, array1) == 1348)
