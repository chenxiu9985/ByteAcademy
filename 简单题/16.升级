def solution(n, k, b, c):
    # 检查数据范围
    if n<1 or n > 1000 or k <0 or k > 1000000:
        return -1

    # 没有能力值
    if k == 0:
        return 0

    # 初始能力值为1
    a = [1] * n
    
    # 记录每个英雄达到b_i所需的最少升级次数
    upgrades_needed = []
    
    for i in range(n):
        upgrades = 0
        while a[i] < b[i]:
            max_increase = 0
            best_x = 1
            # 遍历可能的x值
            for x in range(1, a[i] + 1):
                increase = a[i] // x
                if increase > max_increase and a[i] + increase <= b[i]:
                    max_increase = increase
                    best_x = x
            if max_increase == 0:
                break
            a[i] += max_increase
            upgrades += 1
        # 检查是否刚好达到b_i
        if a[i] == b[i]:
            upgrades_needed.append((upgrades, c[i]))
    
    # 按照升级次数升序排序，若相同则按奖励降序排序
    upgrades_needed.sort(key=lambda x: (x[0], -x[1]))
    
    total_reward = 0
    for u, reward in upgrades_needed:
        if k >= u:
            k -= u
            total_reward += reward
    
    return total_reward


if __name__ == "__main__":
    # Add your test cases here
    print(solution(4, 4, [1, 7, 5, 2], [2, 6, 5, 2]) == 9)
    print(solution(3, 0, [3, 5, 2], [5, 4, 7]) == 0)
